"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.utils = void 0;
const react_1 = __importDefault(require("react"));
const configs_1 = require("./configs");
;
exports.utils = {
    getName: (...args) => configs_1.configs.prefix + '-' + args.join('-'),
    getClassNames: (...args) => {
        let result = [];
        for (let i = 0; i < args.length; i++) {
            let item = args[i];
            const type = typeof item;
            if (type === 'string' && item.length > 0)
                result.push(item);
            else if (type === 'object' && type !== null)
                for (const [key, value] of Object.entries(item))
                    if (value)
                        result.push(key);
        }
        return result.join(' ');
    },
    goTo: (history, path) => {
        history.push(path);
    },
    openNewTab: (url) => {
        window.open(url, '_blank');
    },
    useEvent: (event, callback) => {
        const [eventCalled,] = react_1.default.useState(false);
        react_1.default.useEffect(() => {
            window.addEventListener(event, e => callback(e), false);
            return () => {
                window.removeEventListener(event, e => callback(e), false);
            };
        }, []);
        return eventCalled;
    },
    isElement: (e) => e instanceof Element,
    isNode: (e) => e instanceof Node,
    extendRef: (ref, elementRef, options) => {
        let extendObject = {
            getValue: () => elementRef.current.value ? elementRef.current.value : null,
            setValue: (value) => elementRef.current && (elementRef.current.value = value),
            setFocus: () => elementRef.current && typeof elementRef.current.focus === 'function' && elementRef.current.focus(),
            getBoundingClientRect: () => elementRef.current && typeof elementRef.current.getBoundingClientRect === 'function' ? elementRef.current.getBoundingClientRect() : null
        };
        Object.assign(extendObject, options);
        react_1.default.useImperativeHandle(ref, () => extendObject);
    }
};
//# sourceMappingURL=utils.js.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const utils_1 = require("../../utils");
const Backdrop_1 = __importDefault(require("./Backdrop"));
const Body_1 = __importDefault(require("./Body"));
const ButtonClose_1 = __importDefault(require("./ButtonClose"));
const Close_1 = __importDefault(require("./Close"));
const Footer_1 = __importDefault(require("./Footer"));
const Header_1 = __importDefault(require("./Header"));
const Title_1 = __importDefault(require("./Title"));
const TopCover_1 = __importDefault(require("./TopCover"));
const TopCoverIcon_1 = __importDefault(require("./TopCoverIcon"));
const _name = 'modal';
const _nameDialog = 'modal-dialog';
const Modal = props => {
    const modalRef = react_1.default.useRef(null);
    const [IsShow, setIsShow] = react_1.default.useState(false);
    react_1.default.useEffect(() => {
        if (props.show) {
            utils_1.utils.isElement(modalRef.current) && modalRef.current.classList.add('show');
            setIsShow(true);
        }
    });
    return react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(Backdrop_1.default, { show: props.show }),
        react_1.default.createElement("div", Object.assign({ ref: modalRef }, getAttrsModal(props, IsShow)),
            react_1.default.createElement("div", Object.assign({}, getAttrsDialog(props)),
                react_1.default.createElement("div", { className: "modal-content" }, props.children))));
};
const getAttrsModal = (props, IsShow) => {
    let style = {};
    IsShow && (style.display = 'block');
    let rs = {
        className: utils_1.utils.getClassNames(utils_1.utils.getName(_name), _name, 'fade'),
        tabIndex: -1,
        role: 'dialog',
        'area-hidden': 'true',
        style
    };
    props.static && Object.assign(rs, { 'data-backdrop': 'static' });
    return rs;
};
const getAttrsDialog = (props) => {
    return {
        className: utils_1.utils.getClassNames(utils_1.utils.getName(_nameDialog), _nameDialog, {
            'modal-dialog-centered': props.vCentered,
            'modal-dialog-scrollable': props.scroll
        }, getSize(props.size)),
        role: 'document'
    };
};
const getSize = (size) => {
    return size ? `modal-${size} ` : '';
};
Modal.Header = Header_1.default;
Modal.Title = Title_1.default;
Modal.Body = Body_1.default;
Modal.Footer = Footer_1.default;
Modal.TopCover = TopCover_1.default;
Modal.TopCoverIcon = TopCoverIcon_1.default;
Modal.Close = Close_1.default;
Modal.ButtonClose = ButtonClose_1.default;
exports.default = Modal;
//# sourceMappingURL=index.js.map
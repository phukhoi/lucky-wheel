"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const utils_1 = require("../../../utils");
require("./index.css");
const Text_1 = __importDefault(require("../Text"));
const Option_1 = __importDefault(require("./Option"));
const Dropdown_1 = __importDefault(require("./Dropdown"));
const _name = 'select';
const Select = props => {
    const isMountedRef = react_1.default.useRef(true);
    const inputRef = react_1.default.useRef(null);
    let { disabled, children } = props;
    const [isDropdowning, setIsDropdowning] = react_1.default.useState(false);
    react_1.default.useEffect(() => {
        isMountedRef.current = true;
    });
    react_1.default.useEffect(() => () => void (isMountedRef.current = false));
    let attrs = getAttrs(props);
    const onChange = (value) => {
        !disabled && inputRef.current && inputRef.current.setValue(value);
        setIsDropdowning(false);
    };
    const onFocus = (_e) => setIsDropdowning(true);
    const onBlur = (_e) => {
        setTimeout(() => {
            isMountedRef.current && isDropdowning && setIsDropdowning(false);
        }, 500);
    };
    return react_1.default.createElement("div", Object.assign({}, attrs),
        react_1.default.createElement(Text_1.default, { ref: inputRef, onFocus: onFocus, onBlur: onBlur, className: "form-control" }),
        inputRef.current
            && react_1.default.createElement(Dropdown_1.default, { parentRect: inputRef.current.getBoundingClientRect(), isDropdowning: isDropdowning, options: getRenders(disabled, children, onChange), indexOption: props.indexOption }));
};
const getAttrs = (props) => {
    let { disabled, className } = props;
    return {
        className: utils_1.utils.getClassNames(utils_1.utils.getName(_name), {
            'disabled': disabled
        }, className)
    };
};
const getRenders = (disabled, children, onChange) => {
    let renders = [];
    if (children) {
        if (Array.isArray(children))
            for (let i = 0; i < children.length; i++)
                renders = renders.concat(getRenders(disabled, children[i], onChange));
        else if (children.type === Option_1.default) {
            let child = (Object.assign({}, children));
            child.props = (Object.assign(Object.assign({}, child.props), { onClick: (e, value) => onSelectHandler(e, value, onChange) }));
            renders.push(child);
        }
    }
    return renders;
};
const onSelectHandler = (e, value, onChange) => onChange && onChange(value);
Select.Option = Option_1.default;
exports.default = Select;
//# sourceMappingURL=index.js.map
"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const utils_1 = require("../../../utils");
require("./index.css");
const Item_1 = __importDefault(require("./Item"));
const _wrapper = 'input-file-wrapper';
const _name = 'input-file';
const _draggable = 'draggable';
const _dragList = 'draggable-list';
const InputFile = (props, ref) => {
    const [ChoseFiles, setChoseFiles] = react_1.default.useState([]);
    const fileRef = react_1.default.useRef(null);
    utils_1.utils.extendRef(ref, fileRef, {
        getValue: () => [...ChoseFiles]
    });
    const onChange = (e) => {
        let files = e.target.files || [];
        let newList = props.multipleChoose ? [...ChoseFiles] : [];
        for (let i = 0; i < files.length; ++i) {
            newList = [...newList, files[i]];
        }
        setChoseFiles([...newList]);
    };
    const onClickDrag = (e) => {
        e.preventDefault();
        utils_1.utils.isElement(fileRef.current) && fileRef.current.click();
    };
    const onRemove = (index) => {
        let newList = ChoseFiles.filter((_, i) => i !== index);
        setChoseFiles([...newList]);
    };
    return react_1.default.createElement("div", Object.assign({}, getAttrsWrapper(props, ChoseFiles.length), { 'cnv-multiple': props.multiple }),
        react_1.default.createElement("input", Object.assign({ ref: fileRef }, getAttrsInput(props, onChange))),
        (() => {
            if (props.draggable) {
                return react_1.default.createElement("div", Object.assign({}, getAttrsDragList(props, onClickDrag)),
                    react_1.default.createElement("span", null, props.placeholder || 'Drop file here'),
                    ChoseFiles.map((file, index) => {
                        return react_1.default.createElement(Item_1.default, { key: index, file: file, onClick: () => onRemove(index) });
                    }));
            }
            return null;
        })());
};
const getAttrsWrapper = (props, numFile) => {
    let { className, id, css, draggable } = props;
    return {
        className: utils_1.utils.getClassNames(utils_1.utils.getName(_wrapper), {
            [_draggable]: draggable,
            'cnv-drop': numFile > 0
        }, className),
        id: id,
        style: css,
    };
};
const getAttrsInput = (props, onChange) => {
    let { className, multiple, draggable, id, css } = props, others = __rest(props, ["className", "multiple", "draggable", "id", "css"]);
    return Object.assign({ type: 'file', className: utils_1.utils.getClassNames(utils_1.utils.getName(_name), _name, 'form-control', {
            disabled: props.disabled
        }), multiple: multiple, onChange: onChange }, others);
};
const getAttrsDragList = (props, onClick) => {
    return {
        className: utils_1.utils.getClassNames(utils_1.utils.getName(_dragList), _dragList),
        onClick
    };
};
exports.default = react_1.default.forwardRef(InputFile);
//# sourceMappingURL=index.js.map
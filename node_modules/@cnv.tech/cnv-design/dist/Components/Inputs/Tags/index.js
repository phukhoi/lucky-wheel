"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const utils_1 = require("../../../utils");
const Icons_1 = require("../../../Icons");
require("./index.css");
const _name = 'input-tags';
const InputTags = (props, ref) => {
    const [Tags, setTags] = react_1.default.useState(fixedTagsValue(props.value));
    const [isWorking, setIsWorking] = react_1.default.useState(false);
    const inputRef = react_1.default.useRef(null);
    utils_1.utils.extendRef(ref, inputRef, {
        getValue: () => Tags,
        setValue: (value) => setTags(fixedTagsValue(value))
    });
    const _removeTag = (index) => {
        let tags = Tags.filter((_, i) => i !== index);
        setTags([...tags]);
        props.onChange && props.onChange([...tags]);
    };
    const _keyDown = (e) => {
        let target = e.target;
        let val = target.value;
        let key = e.key;
        if (key === 'Enter' || key === ',') {
            if (val && !Tags.find(tag => tag.toLowerCase() === val.toLowerCase())) {
                let newTags = fixedTagsValue([...Tags, val]);
                setTags(newTags);
                props.onChange && props.onChange([...newTags]);
            }
            setIsWorking(true);
            e.preventDefault();
            target.value = '';
            target.focus();
        }
        else if (key === 'Backspace' && !val) {
            if (Tags.length) {
                let lastTag = Tags.pop();
                console.log(lastTag);
                let newTags = fixedTagsValue([...Tags]);
                setTags(newTags);
                props.onChange && props.onChange([...newTags]);
                inputRef.current && (inputRef.current.value = (lastTag || ''));
            }
            setIsWorking(true);
            target.focus();
        }
    };
    const _focus = () => setIsWorking(true);
    const _blur = (e) => {
        let remain = e.target.value.trim();
        let tags = fixedTagsValue([...Tags, remain]);
        remain && setTags(tags);
        props.onChange && props.onChange([...tags]);
        setIsWorking(false);
    };
    return react_1.default.createElement("div", Object.assign({}, getAttrs(props)),
        react_1.default.createElement("ul", { className: "input-tags__tags" },
            renderTags(Tags, _removeTag),
            react_1.default.createElement("li", { className: "input-tags__tags__input", key: Tags.length },
                react_1.default.createElement("input", { type: "text", className: "form-control", ref: inputRef, onFocus: _focus, onBlur: _blur, onKeyDown: _keyDown, autoFocus: isWorking, disabled: props.disabled, placeholder: props.placeholder }))));
};
const fixedTagsValue = (value) => {
    let rs = [];
    if (typeof value === 'string' || typeof value === 'number') {
        value = value.toString().trim();
        value.length && rs.push(value);
    }
    else if (Array.isArray(value)) {
        for (let i = 0; i < value.length; ++i) {
            rs = rs.concat(fixedTagsValue(value[i]));
        }
    }
    return rs;
};
const renderTags = (tags, remove) => {
    return tags.map((tag, index) => react_1.default.createElement("li", { key: index },
        tag,
        react_1.default.createElement(Icons_1.TioIcon, { icon: "clear-circle", onClick: () => remove(index) })));
};
const getAttrs = (props) => {
    let { className, disabled } = props;
    return {
        className: utils_1.utils.getClassNames(utils_1.utils.getName(_name), _name, className, {
            disabled
        })
    };
};
exports.default = react_1.default.forwardRef(InputTags);
//# sourceMappingURL=index.js.map
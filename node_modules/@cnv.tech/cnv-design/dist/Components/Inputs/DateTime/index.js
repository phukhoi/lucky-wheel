"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DateTimeType = void 0;
const react_1 = __importDefault(require("react"));
const flatpickr_1 = __importDefault(require("flatpickr"));
const utils_1 = require("../../../utils");
const _nameWrapper = 'datetime';
const _name = {
    date: 'datetime-date',
    range: 'datetime-range',
    time: 'datetime-time'
};
var DateTimeType;
(function (DateTimeType) {
    DateTimeType["DATE"] = "date";
    DateTimeType["RANGE"] = "range";
    DateTimeType["TIME"] = "time";
})(DateTimeType = exports.DateTimeType || (exports.DateTimeType = {}));
;
const DateTime = (props, ref) => {
    const inputRef = react_1.default.useRef(null);
    utils_1.utils.extendRef(ref, inputRef);
    react_1.default.useEffect(() => {
        if (utils_1.utils.isElement(inputRef.current)) {
            let dateOptions = {};
            Object.assign(dateOptions, getPropOptions(props));
            Object.assign(dateOptions, {
                onChange: (_, value) => props.onChange && props.onChange(value)
            });
            let parent = inputRef.current.parentNode;
            utils_1.utils.isNode(parent) && utils_1.utils.isNode(parent.firstChild) && flatpickr_1.default(parent.firstChild, dateOptions);
        }
    });
    return react_1.default.createElement("div", Object.assign({}, getAttrsWrapper()),
        react_1.default.createElement("input", Object.assign({ ref: inputRef }, getAttrsInput(props, inputRef))));
};
const getAttrsWrapper = () => {
    return {
        className: utils_1.utils.getClassNames(utils_1.utils.getName(_nameWrapper))
    };
};
const getAttrsInput = (props, ref) => {
    let { title, className, placeholder, disabled, value, type = DateTimeType.DATE } = props;
    let defaultValue = typeof value === 'string' ? value : undefined;
    type = type.toLowerCase();
    ~Object.values(_name).indexOf(type) || (type = DateTimeType.DATE);
    return {
        className: utils_1.utils.getClassNames(utils_1.utils.getName(type), { disabled }, className),
        placeholder,
        title,
        disabled,
        defaultValue,
        onChange: e => props.onChange && props.onChange(ref.current ? ref.current.value : null),
    };
};
const getPropOptions = (props) => {
    let { type = DateTimeType.DATE } = props;
    switch (type) {
        case DateTimeType.RANGE:
            return getPropOptionsRange(props);
        case DateTimeType.TIME:
            return getPropOptionsTime(props);
        default:
            return getPropOptionsDate(props);
    }
};
const getPropOptionsDate = (props) => {
    let rs = {};
    let { minValue, maxValue, format, disable, multiple, separator, enableTime, is24 } = props;
    minValue && Object.assign(rs, { minDate: minValue });
    maxValue && Object.assign(rs, { maxDate: maxValue });
    format && Object.assign(rs, { dateFormat: format });
    enableTime && Object.assign(rs, { enableTime });
    is24 && Object.assign(rs, { time_24hr: true });
    Array.isArray(disable) && Object.assign(rs, { disable });
    multiple && Object.assign(rs, { mode: 'multiple' });
    multiple && separator && Object.assign(rs, { conjunction: separator });
    return rs;
};
const getPropOptionsRange = (props) => {
    let rs = { mode: 'range' };
    let { minValue, maxValue, format, disable, multiple, separator, value, enableTime, is24 } = props;
    minValue && Object.assign(rs, { minDate: minValue });
    maxValue && Object.assign(rs, { maxDate: maxValue });
    format && Object.assign(rs, { dateFormat: format });
    enableTime && Object.assign(rs, { enableTime });
    is24 && Object.assign(rs, { time_24hr: true });
    Array.isArray(disable) && Object.assign(rs, { disable });
    Array.isArray(value) && value.length && Object.assign(rs, { defaultDate: value });
    return rs;
};
const getPropOptionsTime = (props) => {
    let rs = { enableTime: true, noCalendar: true };
    let { format, is24, minValue, maxValue, value } = props;
    minValue && Object.assign(rs, { minTime: minValue });
    maxValue && Object.assign(rs, { maxTime: maxValue });
    format && Object.assign(rs, { dateFormat: format });
    is24 && Object.assign(rs, { time_24hr: true });
    value && Object.assign(rs, { defaultDate: value });
    return rs;
};
exports.default = react_1.default.forwardRef(DateTime);
//# sourceMappingURL=index.js.map
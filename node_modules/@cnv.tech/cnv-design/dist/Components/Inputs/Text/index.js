"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const utils_1 = require("../../../utils");
require("./index.css");
const _name = 'text';
const _nameWrapper = 'text-wrapper';
const _nameHasTitle = 'has-title';
const _nameHasValue = 'has-value';
const Text = (props, ref) => {
    const inputRef = react_1.default.useRef(null);
    let { title, value } = props;
    const [hasValue, setHasValue] = react_1.default.useState(isHasValue(value));
    utils_1.utils.extendRef(ref, inputRef, {
        setValue: (value) => setValue(inputRef, value, hasValue, setHasValue)
    });
    return title
        ? renderWrapper(props, inputRef, hasValue, setHasValue)
        : renderInput(props, inputRef, hasValue, setHasValue);
};
const renderWrapper = (props, ref, hasValue, setHasValue) => {
    let { title } = props;
    let attrs = getAttrsWrapper(props);
    return react_1.default.createElement("label", Object.assign({}, attrs),
        renderInput(props, ref, hasValue, setHasValue),
        react_1.default.createElement("span", null, title));
};
const renderInput = (props, ref, hasValue, setHasValue) => {
    let attrs = getAttrsInput(props, hasValue, setHasValue);
    return react_1.default.createElement("input", Object.assign({ ref: ref }, attrs));
};
const getAttrsWrapper = (props) => {
    let { disabled } = props;
    return {
        className: utils_1.utils.getClassNames(utils_1.utils.getName(_nameWrapper), {
            'disabled': disabled
        })
    };
};
const getAttrsInput = (props, hasValue, setHasValue) => {
    let { title, placeholder, value, disabled, className } = props;
    if (title)
        placeholder = title;
    return {
        className: utils_1.utils.getClassNames(utils_1.utils.getName(_name), {
            [utils_1.utils.getName(_name, _nameHasTitle)]: title,
            [utils_1.utils.getName(_name, _nameHasValue)]: hasValue,
            'disabled': disabled
        }, className),
        placeholder: placeholder,
        defaultValue: value,
        disabled: disabled,
        onChange: e => onChangeHandler(e, props, hasValue, setHasValue),
        autoCorrect: 'off',
        onFocus: e => onFocusHandler(e, props),
        onBlur: e => onBlurHandler(e, props)
    };
};
const onBlurHandler = (e, props) => {
    typeof props.onBlur === 'function' && props.onBlur(e);
};
const onFocusHandler = (e, props) => {
    typeof props.onFocus === 'function' && props.onFocus(e);
};
const onChangeHandler = (e, props, hasValue, setHasValue) => {
    let { value } = e.target;
    let nextHasValue = isHasValue(value);
    if (nextHasValue != hasValue)
        setHasValue(nextHasValue);
    callOnChange(e, props, value);
};
const callOnChange = (e, props, value) => {
    let { onChange } = props;
    if (onChange)
        onChange(e, value);
};
const setValue = (ref, value, hasValue, setHasValue) => {
    if (ref.current)
        ref.current.value = value;
    let nextHasValue = isHasValue(value);
    if (nextHasValue != hasValue)
        setHasValue(nextHasValue);
};
const isHasValue = (value) => {
    if (value)
        return true;
    return false;
};
exports.default = react_1.default.forwardRef(Text);
//# sourceMappingURL=index.js.map
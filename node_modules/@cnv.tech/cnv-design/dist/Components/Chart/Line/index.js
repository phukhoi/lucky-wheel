"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_chartjs_2_1 = require("react-chartjs-2");
const state = {
    labels: ['January', 'February', 'March', 'April', 'May'],
    datasets: [
        {
            label: 'Rainfall',
            fill: false,
            lineTension: 0.5,
            backgroundColor: 'rgba(75,192,192,1)',
            borderColor: 'rgba(0,0,0,1)',
            borderWidth: 2,
            data: [65, 59, 80, 81, 56]
        }
    ]
};
class App extends react_1.default.Component {
    render() {
        return (react_1.default.createElement("div", null,
            react_1.default.createElement(react_chartjs_2_1.Line, { data: state, options: {
                    title: {
                        display: true,
                        text: 'Average Rainfall per month',
                        fontSize: 20
                    },
                    legend: {
                        display: true,
                        position: 'right'
                    }
                } })));
    }
}
exports.default = App;
// import React from 'react';
// import { Line, ChartData } from 'react-chartjs-2';
// import * as chartjs from 'chart.js';
// import { utils } from '../../../utils';
// interface LineChartComponent extends React.FunctionComponent<LineChartProps>{}
// export interface LineChartProps{
//   className?: string,
//   css?: React.CSSProperties
//   labels: (string|number)[],
//   datas: (string|number)[],
//   beginAtZero?:boolean,
//   yPrefix?:string,
//   name?:string,
//   fill?:boolean,
//   xAxes?:{ display?: boolean },
//   yAxes?: { display?: boolean }
// }
// const _name = 'chartjs__line';
// const LineChart: LineChartComponent = props => {
//   let [ labels, datas ] = formatChartData(props);
//   let { beginAtZero = true, yPrefix = '', name = '', fill = false } = props;
//   const data: ChartData<chartjs.ChartData> = {
//     labels: [ ...labels ] as string[],
//     datasets: [
//       {
//         label: name,
//         fill,
//         lineTension: 0.1,
//         backgroundColor: 'rgba(75,192,192,0.4)',
//         borderColor: 'rgba(75,192,192,1)',
//         borderCapStyle: 'butt',
//         borderDash: [],
//         borderDashOffset: 0.0,
//         borderJoinStyle: 'miter',
//         pointBorderColor: 'rgba(75,192,192,1)',
//         pointBackgroundColor: '#fff',
//         pointBorderWidth: 1,
//         pointHoverRadius: 5,
//         pointHoverBackgroundColor: 'rgba(75,192,192,1)',
//         pointHoverBorderColor: 'rgba(220,220,220,1)',
//         pointHoverBorderWidth: 2,
//         pointRadius: 1,
//         pointHitRadius: 10,
//         data: [ ...datas ] as chartjs.ChartPoint[],
//       }
//     ]
//   };
//   const lineOptions = {
//     scales: {
//       xAxes: [{
//         gridLines: {
//           display: false,
//         },
//       }],
//       yAxes: [{
//         // stacked: true,
//         gridLines: {
//           display: false,
//         },
//         ticks: {
//           beginAtZero,
//           // Return an empty string to draw the tick line but hide the tick label
//           // Return `null` or `undefined` to hide the tick line entirely
//           userCallback(value:number|string) {
//             return yPrefix + value.toString().split(/(?=(?:...)*$)/).join('.');
//           },
//         },
//       }],
//     },
//     legend: {
//       display: false,
//     },
//     tooltips: {
//       enabled: false,
//     },
//   };
//   const styles = {
//     fontFamily: 'sans-serif',
//     textAlign: 'center',
//   };
//   return <div { ...getAttrDiv(props) }>
//     <Line data={data} options={lineOptions} />
//   </div>
// }
// const getAttrDiv = (props: LineChartProps) => {
//   return {
//     className: utils.getClassNames(
//       utils.getName(_name),
//       _name,
//       props.className
//     ),
//     style: props.css
//   }
// }
// const formatChartData = (props: LineChartProps) => {
//   let rsLabels: (string|number|null)[] = []
//   let rsDatas : (string|number|null)[] = []
//   let lengthLabel = props.labels.length;
//   let lengthDatas = props.datas.length;
//   let min = lengthDatas < lengthLabel ? lengthDatas : lengthLabel;
//   for (let i = 0; i < min; ++min){
//     rsLabels.push(fixItemData(props.labels[i]));
//     rsDatas.push(fixItemData(props.datas[i]));
//   }
//   return [ [ ...rsLabels ], [ ...rsDatas ]];
// }
// const fixItemData = (item: any): string|number|null => {
//   let type = typeof item;
//   if (type === 'string' || type === 'number') return item.toString();
//   return null;
// }
// export default LineChart;
//# sourceMappingURL=index.js.map
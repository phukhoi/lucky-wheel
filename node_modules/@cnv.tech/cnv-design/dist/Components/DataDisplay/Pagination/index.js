"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const utils_1 = require("../../../utils");
const Layouts_1 = require("../../Layouts");
const Item_1 = __importDefault(require("./Item"));
const Link_1 = __importDefault(require("./Link"));
const _wrapper = 'pagination-wrapper';
const _name = 'pagination';
const firstElement = (props, disabled) => {
    return react_1.default.createElement(Item_1.default, { key: -2, current: props.currentPage || 1, goTo: 1, className: `first${disabled ? ' disabled' : ''}`, onClick: props.onClick }, props.first || 'First');
};
const prevElement = (props, disabled) => {
    return react_1.default.createElement(Item_1.default, { key: -1, current: props.currentPage || 1, goTo: (props.currentPage || 1) - 1, className: `prev${disabled ? ' disabled' : ''}`, onClick: props.onClick }, props.prev || 'Previous');
};
const lastElement = (props, disabled, end) => {
    return react_1.default.createElement(Item_1.default, { key: end + 2, current: props.currentPage || 1, goTo: end, className: `last${disabled ? ' disabled' : ''}`, onClick: props.onClick }, props.last || 'Last');
};
const nextElement = (props, disabled, end) => {
    let nextPage = (props.currentPage || 1) + 1;
    nextPage > end && (nextPage = 0);
    return react_1.default.createElement(Item_1.default, { key: end + 1, current: props.currentPage || 1, goTo: nextPage, className: `next${disabled ? ' disabled' : ''}`, onClick: props.onClick }, props.next || 'Next');
};
const Pagination = (props) => {
    const paginationRef = react_1.default.useRef(null);
    let { sidesButton = false, totalItems, currentPage = 1, itemsPerPage, distance, showing = false, showingLabel = '' } = props;
    if (totalItems < 1 || itemsPerPage < 1)
        return null;
    let totalPage = Math.ceil(totalItems / itemsPerPage);
    if (totalPage <= 1)
        return null;
    let start = 1, end = totalPage;
    currentPage < 1 && (currentPage = 1);
    if (distance && distance > 0) {
        let split = Math.floor(distance / 2);
        start = currentPage - split;
        end = start + distance;
        distance % 2 === 0 && (end -= 1);
        distance = end - start;
        if (start < 1) {
            start = 1;
            end = start + distance;
        }
        if (end > totalPage) {
            end = totalPage;
            start = end - distance;
            start < 1 && (start = 1);
        }
    }
    return react_1.default.createElement(Layouts_1.Grid.Row, null,
        react_1.default.createElement(Layouts_1.Grid.Col, { md: true, size: showing ? 6 : 12 },
            react_1.default.createElement("nav", Object.assign({}, getAttrsNav(), { "aria-label": "Page navigation" }),
                react_1.default.createElement("ul", Object.assign({}, getAttrsUl(props), { ref: paginationRef }),
                    sidesButton ? [
                        firstElement(props, currentPage === 1),
                        prevElement(props, currentPage === 1)
                    ] : null,
                    (() => {
                        let p = [];
                        for (let i = start; i <= end; ++i) {
                            currentPage === end;
                            p.push(react_1.default.createElement(Item_1.default, { key: i, current: currentPage, goTo: i, onClick: props.onClick }, i));
                        }
                        return p;
                    })(),
                    sidesButton ? [
                        nextElement(props, currentPage === end, end),
                        lastElement(props, currentPage === end, end)
                    ] : null))),
        (() => {
            if (showing) {
                let textShowing = showingLabel || 'Showing from {{from}} to {{to}} of {{total}}';
                let from = (currentPage - 1) * itemsPerPage + 1;
                let to = from + itemsPerPage - 1;
                to > totalItems && (to = totalItems);
                textShowing = textShowing
                    .replace(/\{\{\s*from\s*\}\}/g, from.toString())
                    .replace(/\{\{\s*to\s*\}\}/g, to.toString())
                    .replace(/\{\{\s*total\s*\}\}/, totalItems.toString());
                return react_1.default.createElement(Layouts_1.Grid.Col, { md: true, size: 6, className: "text-right justify-content-end" },
                    react_1.default.createElement("span", null, textShowing));
            }
            return null;
        })());
};
const getAttrsNav = () => {
    return {
        className: utils_1.utils.getClassNames(utils_1.utils.getName(_wrapper))
    };
};
const getAttrsUl = (props) => {
    return {
        className: utils_1.utils.getClassNames(utils_1.utils.getName(_name), _name, props.className || '')
    };
};
Pagination.Link = Link_1.default;
Pagination.Item = Item_1.default;
exports.default = Pagination;
//# sourceMappingURL=index.js.map
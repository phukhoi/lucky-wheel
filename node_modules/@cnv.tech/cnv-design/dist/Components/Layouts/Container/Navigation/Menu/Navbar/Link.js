"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NavbarLink = void 0;
const react_1 = __importDefault(require("react"));
const react_router_dom_1 = require("react-router-dom");
const Icons_1 = require("../../../../../../Icons");
const utils_1 = require("../../../../../../utils");
const _name = 'menu-item-link';
const setActive = (navlink) => {
};
const setInactive = (navlink) => {
};
const NavbarLink = props => {
    const linkRef = react_1.default.useRef(null);
    react_1.default.useEffect(() => {
        if (utils_1.utils.isElement(linkRef.current)) {
            linkRef.current.addEventListener('click', () => {
                var _a, _b, _c, _d, _e, _f, _g, _h;
                let isActive = (_a = linkRef.current) === null || _a === void 0 ? void 0 : _a.classList.contains('active');
                Array.from(((_d = (_c = (_b = linkRef.current) === null || _b === void 0 ? void 0 : _b.parentElement) === null || _c === void 0 ? void 0 : _c.parentElement) === null || _d === void 0 ? void 0 : _d.getElementsByClassName(utils_1.utils.getName(_name))) || [])
                    .map(navlink => {
                    var _a, _b;
                    navlink.classList.contains('active') && navlink.classList.remove('active');
                    (_a = navlink.parentElement) === null || _a === void 0 ? void 0 : _a.classList.remove('show');
                    (_b = navlink.nextElementSibling) === null || _b === void 0 ? void 0 : _b.setAttribute('style', 'display:none;max-height:0!important');
                });
                let next = (_e = linkRef.current) === null || _e === void 0 ? void 0 : _e.nextElementSibling;
                if (utils_1.utils.isElement(next) && next.childElementCount) {
                    let parent = (_f = linkRef.current) === null || _f === void 0 ? void 0 : _f.parentElement;
                    if (!utils_1.utils.isElement(parent))
                        return;
                    if (isActive) {
                        parent.classList.remove('show');
                        next.setAttribute('style', 'max-height:0!important');
                        (_g = linkRef.current) === null || _g === void 0 ? void 0 : _g.classList.remove('active');
                    }
                    else {
                        // next.setAttribute('style', 'display: block');
                        let firstChild = next.firstElementChild;
                        let maxHeight = ((firstChild ? firstChild.clientHeight : 0) + 1) * next.childElementCount;
                        next.setAttribute('style', 'max-height:' + maxHeight + 'px!important');
                        parent.classList.add('show');
                        (_h = linkRef.current) === null || _h === void 0 ? void 0 : _h.classList.add('active');
                    }
                    return;
                }
            });
        }
    }, [linkRef]);
    let { name } = props;
    return react_1.default.createElement(react_router_dom_1.Link, Object.assign({ ref: linkRef }, getAttrs(props)),
        (() => {
            if (props.icon) {
                return react_1.default.createElement(props.icon, { className: "nav-icon" });
            }
            else {
                return react_1.default.createElement(Icons_1.IconCircle, { className: "nav-indicator-icon" });
            }
        })(),
        react_1.default.createElement("span", { className: "text-truncate" }, name));
};
exports.NavbarLink = NavbarLink;
const getAttrs = (props) => {
    let { className = '', action = '', name } = props;
    return {
        className: utils_1.utils.getClassNames(utils_1.utils.getName(_name), 'nav-link', className),
        to: action,
        title: name
    };
};
//# sourceMappingURL=Link.js.map